<?xml version="1.0" encoding="UTF-8"?>
<component xmlns="http://schemas.autodesk.com/netfabb/automaticcomponenttoolkit/2018" 
	libraryname="GRPC Library Wrapper" namespace="LibGRPCWrapper" copyright="Autodesk Inc." year="2023" basename="libgrpcwrapper"
	version="1.2.0">
	<license>
		<line value="All rights reserved." />
		<line value="" />
		<line value="Redistribution and use in source and binary forms, with or without" />
		<line value="modification, are permitted provided that the following conditions are met:" />
		<line value="    * Redistributions of source code must retain the above copyright" />
		<line value="      notice, this list of conditions and the following disclaimer." />
		<line value="    * Redistributions in binary form must reproduce the above copyright" />
		<line value="      notice, this list of conditions and the following disclaimer in the" />
		<line value="      documentation and/or other materials provided with the distribution." />
		<line value="    * Neither the name of the Autodesk Inc. nor the" />
		<line value="      names of its contributors may be used to endorse or promote products" />
		<line value="      derived from this software without specific prior written permission." />
		<line value="" />
		<line value="THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND" />
		<line value="ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED" />
		<line value="WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE" />
		<line value="DISCLAIMED. IN NO EVENT SHALL AUTODESK INC. BE LIABLE FOR ANY" />
		<line value="DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES" />
		<line value="(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;" />
		<line value="LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND" />
		<line value="ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT" />
		<line value="(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS" />
		<line value="SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE." />
		<line value="" />
	</license>
	
	<bindings>
		<binding language="CppDynamic" indentation="tabs" />
	</bindings>
	<implementations>
		<implementation language="Cpp" indentation="tabs"/>
	</implementations>
	
	<errors>
			
		<error name="NOTIMPLEMENTED" code="1001" description="functionality not implemented" />
		<error name="INVALIDPARAM" code="1002" description="an invalid parameter was passed" />
		<error name="INVALIDCAST" code="1003" description="a type cast failed" />
		<error name="BUFFERTOOSMALL" code="1004" description="a provided buffer is too small" />
		<error name="GENERICEXCEPTION" code="1005" description="a generic exception occurred" />
		<error name="COULDNOTLOADLIBRARY" code="1006" description="the library could not be loaded" />
		<error name="COULDNOTFINDLIBRARYEXPORT" code="1007" description="a required exported symbol could not be found in the library" />
		<error name="INCOMPATIBLEBINARYVERSION" code="1008" description="the version of the binary interface does not match the bindings interface" />
		<error name="COULDNOTCREATECHANNEL" code="1009" description="Could not create channel." />
		<error name="FAILEDTOIMPORTPROTODEFINITION" code="1010" description="Failed to import proto definition." />
		<error name="EMPTYREQUESTTYPEIDENTIFIER" code="1011" description="Empty request type identifier." />
		<error name="INVALIDREQUESTTYPEIDENTIFIER" code="1012" description="Invalid request type identifier." />
		<error name="EMPTYRESPONSETYPEIDENTIFIER" code="1013" description="Empty request type identifier." />
		<error name="INVALIDRESPONSETYPEIDENTIFIER" code="1014" description="Invalid request type identifier." />
		<error name="UNKNOWNMESSAGETYPENAME" code="1015" description="Unknown message type name." />
		<error name="EMPTYMESSAGETYPENAME" code="1016" description="Empty messsage type name." />
		<error name="COULDNOTGETMESSAGEPROTOTYPE" code="1017" description="Could not get message prototype." />
		<error name="REQUESTFIELDNOTFOUND" code="1018" description="Request field not found." />
		<error name="RESPONSEFIELDNOTFOUND" code="1019" description="Response field not found." />
		<error name="EMPTYSERVICEMETHOD" code="1020" description="Empty service method." />
		<error name="EMPTYREQUESTRESPONSE" code="1021" description="Empty request response." />
		<error name="FAILEDTOPARSEREQUESTRESPONSE" code="1022" description="Failed to parse request response." />
		<error name="MESSAGEDESCRIPTORISNULL" code="1023" description="Internal error: Message descriptor is null" />
		<error name="MESSAGISNULL" code="1024" description="Internal error: Message is null" />
		<error name="MESSAGREFLECTIONISNULL" code="1025" description="Internal error: Message reflection is null" />
		<error name="COULDNOTRETRIEVETEMPPATHS" code="1026" description="Could not retrieve temp paths" />
		<error name="COULDNOTCONVERTUNICODESTRING" code="1027" description="Could not convert unicode string" />
		
				
	</errors>
	

	
		
	<class name="Base">
	</class>
	

	<class name="Message" parent="Base">

		<method name="HasField" description="Returns if the message has a field of a certain name.">
			<param name="FieldName" type="string" pass="in" description="Name of the field." />
			<param name="FieldExists" type="bool" pass="return" description="True if field exists." />
		</method>

		<method name="HasStringField" description="Returns if the message has a field of a certain name and this field is a string field.">
			<param name="FieldName" type="string" pass="in" description="Name of the field." />
			<param name="StringFieldExists" type="bool" pass="return" description="True if field exists and is of type string." />
		</method>

		<method name="SetStringField" description="Sets a string field of the message. Fails if the field does not exist or is not a string field.">
			<param name="FieldName" type="string" pass="in" description="Name of the field." />
			<param name="Value" type="string" pass="in" description="New value of the field." />
		</method>

		<method name="GetStringField" description="Gets a string field of the message. Fails if the field does not exist or is not a string field.">
			<param name="FieldName" type="string" pass="in" description="Name of the field." />
			<param name="Value" type="string" pass="return" description="Current value of the field." />
		</method>

		<method name="SetInt32Field" description="Sets a int32 field of the message. Fails if the field does not exist or is not a int32 field.">
			<param name="FieldName" type="string" pass="in" description="Name of the field." />
			<param name="Value" type="int32" pass="in" description="New value of the field." />
		</method>

		<method name="GetInt32Field" description="Gets a int32 field of the message. Fails if the field does not exist or is not a int32 field.">
			<param name="FieldName" type="string" pass="in" description="Name of the field." />
			<param name="Value" type="int32" pass="return" description="Current value of the field." />
		</method>

		<method name="SetUInt32Field" description="Sets a uint32 field of the message. Fails if the field does not exist or is not a uint32 field.">
			<param name="FieldName" type="string" pass="in" description="Name of the field." />
			<param name="Value" type="uint32" pass="in" description="New value of the field." />
		</method>

		<method name="GetUInt32Field" description="Gets a uint32 field of the message. Fails if the field does not exist or is not a uint32 field.">
			<param name="FieldName" type="string" pass="in" description="Name of the field." />
			<param name="Value" type="uint32" pass="return" description="Current value of the field." />
		</method>
		
		<method name="SetInt64Field" description="Sets a int64 field of the message. Fails if the field does not exist or is not a int64 field.">
			<param name="FieldName" type="string" pass="in" description="Name of the field." />
			<param name="Value" type="int64" pass="in" description="New value of the field." />
		</method>

		<method name="GetInt64Field" description="Gets a int64 field of the message. Fails if the field does not exist or is not a int64 field.">
			<param name="FieldName" type="string" pass="in" description="Name of the field." />
			<param name="Value" type="int64" pass="return" description="Current value of the field." />
		</method>

		<method name="SetUInt64Field" description="Sets a uint64 field of the message. Fails if the field does not exist or is not a uint64 field.">
			<param name="FieldName" type="string" pass="in" description="Name of the field." />
			<param name="Value" type="uint64" pass="in" description="New value of the field." />
		</method>

		<method name="GetUInt64Field" description="Gets a uint64 field of the message. Fails if the field does not exist or is not a uint64 field.">
			<param name="FieldName" type="string" pass="in" description="Name of the field." />
			<param name="Value" type="uint64" pass="return" description="Current value of the field." />
		</method>

		<method name="SetBoolField" description="Sets a bool field of the message. Fails if the field does not exist or is not a bool field.">
			<param name="FieldName" type="string" pass="in" description="Name of the field." />
			<param name="Value" type="bool" pass="in" description="New value of the field." />
		</method>

		<method name="GetBoolField" description="Gets a bool field of the message. Fails if the field does not exist or is not a bool field.">
			<param name="FieldName" type="string" pass="in" description="Name of the field." />
			<param name="Value" type="bool" pass="return" description="Current value of the field." />
		</method>
		
		<method name="SetFloatField" description="Sets a float field of the message. Fails if the field does not exist or is not a float field.">
			<param name="FieldName" type="string" pass="in" description="Name of the field." />
			<param name="Value" type="single" pass="in" description="New value of the field." />
		</method>

		<method name="GetFloatField" description="Gets a float field of the message. Fails if the field does not exist or is not a float field.">
			<param name="FieldName" type="string" pass="in" description="Name of the field." />
			<param name="Value" type="single" pass="return" description="Current value of the field." />
		</method>

		<method name="SetDoubleField" description="Sets a double field of the message. Fails if the field does not exist or is not a double field.">
			<param name="FieldName" type="string" pass="in" description="Name of the field." />
			<param name="Value" type="double" pass="in" description="New value of the field." />
		</method>

		<method name="GetDoubleField" description="Gets a double field of the message. Fails if the field does not exist or is not a double field.">
			<param name="FieldName" type="string" pass="in" description="Name of the field." />
			<param name="Value" type="int32" pass="return" description="Current value of the field." />
		</method>

	</class>	

	<class name="Response" parent="Message">

		<method name="GetResponseType" description="Returns the response type of the connection.">
			<param name="ResponseType" type="string" pass="return" description="Message type identifier." />
		</method>

	</class>	

	<class name="Request" parent="Message">
		<method name="GetRequestType" description="Returns the request type of the connection.">
			<param name="RequestType" type="string" pass="return" description="Message type identifier." />
		</method>
		
		<method name="GetExpectedResponseType" description="Returns the expected response type of the connection.">
			<param name="ExpectedResponseType" type="string" pass="return" description="Message type identifier." />
		</method>
		
		
		<method name="SendBlocking" description="Sends the request to the end point and waits for a response.">
			<param name="ServiceMethod" type="string" pass="in" description="Service method to call." />
			<param name="TimeOutInMS" type="uint32" pass="in" description="Timeout for the response in MS." />
			<param name="ResponseInstance" type="class" class="Response" pass="return" description="Response Instance" />			
		</method>
		
	</class>	

	<class name="Connection" parent="Base">
			
		<method name="GetEndPoint" description="Returns the end point of the connection.">
			<param name="EndPoint" type="string" pass="return" description="End point of the connection." />
		</method>

		<method name="Close" description="Closes the connection. All subsequent calls to the connection will fail.">
		</method>

		<method name="CreateStaticRequest" description="Creates a message request to the end point.">		
			<param name="RequestTypeIdentifier" type="string" pass="in" description="Message Type Identifier of the request." />
			<param name="ResponseTypeIdentifier" type="string" pass="in" description="Message Type Identifier of the expected response." />
			<param name="RequestInstance" type="class" class="Request" pass="return" description="Request Instance" />			
		</method>
		
	
	
	</class>	
	
	
	<class name="Protocol" parent="Base">
		
		<method name="ConnectUnsecure" description="Connects to an end point">
			<param name="NetworkCredentials" type="string" pass="in" description="Host to connect to" />
			<param name="ConnectionInstance" type="class" class="Connection" pass="return" description="Connection Instance" />
		</method>
	
		<method name="GetProtobufDefinition" description="Returns protobuf definition as string.">
			<param name="ProtobufDefinition" type="string" pass="return" description="Protobuf file as string." />
		</method>

		<method name="HasMessageType" description="Returns if protocol buffer has a certain message type.">
			<param name="MessageTypeIdentifier" type="string" pass="in" description="Message Type Identifier." />
			<param name="Exists" type="bool" pass="return" description="Returns if message type exists." />
		</method>

	</class>		
	
	<global baseclassname="Base" stringoutclassname="Base" acquiremethod="AcquireInstance"
		releasemethod="ReleaseInstance" versionmethod="GetVersion" errormethod="GetLastError" journalmethod="SetJournal"		
		symbollookupmethod="GetSymbolLookupMethod"
		>
		<method name="GetVersion" description = "retrieves the binary version of this library.">
			<param name="Major" type="uint32" pass="out" description="returns the major version of this library" />
			<param name="Minor" type="uint32" pass="out" description="returns the minor version of this library" />
			<param name="Micro" type="uint32" pass="out" description="returns the micro version of this library" />
		</method>
		<method name="GetLastError" description="Returns the last error recorded on this object">
			<param name="Instance" type="class" class="Base" pass="in" description="Instance Handle" />
			<param name="ErrorMessage" type="string" pass="out" description="Message of the last error" />
			<param name="HasError" type="bool" pass="return" description="Is there a last error to query" />
		</method>
		<method name="AcquireInstance" description="Acquire shared ownership of an Instance">
			<param name="Instance" type="class" class="Base" pass="in" description="Instance Handle" />
		</method>
		<method name="ReleaseInstance" description="Releases shared ownership of an Instance">
			<param name="Instance" type="class" class="Base" pass="in" description="Instance Handle" />
		</method>

		<method name="GetSymbolLookupMethod" description="Returns the address of the SymbolLookupMethod">
			<param name="SymbolLookupMethod" type="pointer" pass="return" description="Address of the SymbolAddressMethod" />
		</method>
		
		<method name="CreateProtocol" description="Returns a PLC instance">
			<param name="ProtoBufferDefinition" type="string" pass="in" description="Protobuf structure definition as string." />
			<param name="ProtocolInstance" type="class" class="Protocol" pass="return" description="Protocol Instance" />
		</method>
		
	</global>
</component>
