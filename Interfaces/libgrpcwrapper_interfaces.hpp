/*++

Copyright (C) 2023 Autodesk Inc.

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the Autodesk Inc. nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL AUTODESK INC. BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


This file has been generated by the Automatic Component Toolkit (ACT) version 1.8.0-develop.

Abstract: This is an autogenerated C++ header file in order to allow easy
development of GRPC Library Wrapper. The implementer of GRPC Library Wrapper needs to
derive concrete classes from the abstract classes in this header.

Interface version: 1.2.0

*/


#ifndef __LIBGRPCWRAPPER_CPPINTERFACES
#define __LIBGRPCWRAPPER_CPPINTERFACES

#include <string>
#include <memory>

#include "libgrpcwrapper_types.hpp"



namespace LibGRPCWrapper {
namespace Impl {

/**
 Forward declarations of class interfaces
*/
class IBase;
class IMessage;
class IResponse;
class IRequest;
class IConnection;
class IProtocol;



/*************************************************************************************************************************
 Parameter Cache definitions
**************************************************************************************************************************/

class ParameterCache {
	public:
		virtual ~ParameterCache() {}
};

template <class T1> class ParameterCache_1 : public ParameterCache {
	private:
		T1 m_param1;
	public:
		ParameterCache_1 (const T1 & param1)
			: m_param1 (param1)
		{
		}

		void retrieveData (T1 & param1)
		{
			param1 = m_param1;
		}
};

template <class T1, class T2> class ParameterCache_2 : public ParameterCache {
	private:
		T1 m_param1;
		T2 m_param2;
	public:
		ParameterCache_2 (const T1 & param1, const T2 & param2)
			: m_param1 (param1), m_param2 (param2)
		{
		}

		void retrieveData (T1 & param1, T2 & param2)
		{
			param1 = m_param1;
			param2 = m_param2;
		}
};

template <class T1, class T2, class T3> class ParameterCache_3 : public ParameterCache {
	private:
		T1 m_param1;
		T2 m_param2;
		T3 m_param3;
	public:
		ParameterCache_3 (const T1 & param1, const T2 & param2, const T3 & param3)
			: m_param1 (param1), m_param2 (param2), m_param3 (param3)
		{
		}

		void retrieveData (T1 & param1, T2 & param2, T3 & param3)
		{
			param1 = m_param1;
			param2 = m_param2;
			param3 = m_param3;
		}
};


/*************************************************************************************************************************
 Class interface for Base 
**************************************************************************************************************************/

class IBase {
private:
	std::unique_ptr<ParameterCache> m_ParameterCache;
public:
	/**
	* IBase::~IBase - virtual destructor of IBase
	*/
	virtual ~IBase() {};

	/**
	* IBase::ReleaseBaseClassInterface - Releases ownership of a base class interface. Deletes the reference, if necessary.
	* @param[in] pIBase - The base class instance to release
	*/
	static void ReleaseBaseClassInterface(IBase* pIBase)
	{
		if (pIBase) {
			pIBase->DecRefCount();
		}
	};

	/**
	* IBase::AcquireBaseClassInterface - Acquires shared ownership of a base class interface.
	* @param[in] pIBase - The base class instance to acquire
	*/
	static void AcquireBaseClassInterface(IBase* pIBase)
	{
		if (pIBase) {
			pIBase->IncRefCount();
		}
	};


	/**
	* IBase::GetLastErrorMessage - Returns the last error registered of this class instance
	* @param[out] sErrorMessage - Message of the last error registered
	* @return Has an error been registered already
	*/
	virtual bool GetLastErrorMessage(std::string & sErrorMessage) = 0;

	/**
	* IBase::ClearErrorMessages - Clears all registered messages of this class instance
	*/
	virtual void ClearErrorMessages() = 0;

	/**
	* IBase::RegisterErrorMessage - Registers an error message with this class instance
	* @param[in] sErrorMessage - Error message to register
	*/
	virtual void RegisterErrorMessage(const std::string & sErrorMessage) = 0;

	/**
	* IBase::IncRefCount - Increases the reference count of a class instance
	*/
	virtual void IncRefCount() = 0;

	/**
	* IBase::DecRefCount - Decreases the reference count of a class instance and free releases it, if the last reference has been removed
	* @return Has the object been released
	*/
	virtual bool DecRefCount() = 0;

	/**
	* IBase::_setCache - set parameter cache of object
	*/
	void _setCache(ParameterCache * pCache)
	{
		m_ParameterCache.reset(pCache);
	}

	/**
	* IBase::_getCache - returns parameter cache of object
	*/
	ParameterCache* _getCache()
	{
		return m_ParameterCache.get();
	}

};


/**
 Definition of a shared pointer class for IBase
*/
template<class T>
class IBaseSharedPtr : public std::shared_ptr<T>
{
public:
	explicit IBaseSharedPtr(T* t = nullptr)
		: std::shared_ptr<T>(t, IBase::ReleaseBaseClassInterface)
	{
		t->IncRefCount();
	}

	// Reset function, as it also needs to properly set the deleter.
	void reset(T* t = nullptr)
	{
		std::shared_ptr<T>::reset(t, IBase::ReleaseBaseClassInterface);
	}

	// Get-function that increases the Base class's reference count
	T* getCoOwningPtr()
	{
		T* t = this->get();
		t->IncRefCount();
		return t;
	}
};


typedef IBaseSharedPtr<IBase> PIBase;


/*************************************************************************************************************************
 Class interface for Message 
**************************************************************************************************************************/

class IMessage : public virtual IBase {
public:
	/**
	* IMessage::HasField - Returns if the request has a field of a certain name.
	* @param[in] sFieldName - Name of the field.
	* @return True if field exists.
	*/
	virtual bool HasField(const std::string & sFieldName) = 0;

	/**
	* IMessage::HasStringField - Returns if the request has a field of a certain name and this field is a string field.
	* @param[in] sFieldName - Name of the field.
	* @return True if field exists and is of type string.
	*/
	virtual bool HasStringField(const std::string & sFieldName) = 0;

	/**
	* IMessage::SetStringField - Sets a string field of the request. Fails if the field does not exist or is not a string field.
	* @param[in] sFieldName - Name of the field.
	* @param[in] sValue - New value of the field.
	*/
	virtual void SetStringField(const std::string & sFieldName, const std::string & sValue) = 0;

	/**
	* IMessage::GetStringField - Gets a string field of the request. Fails if the field does not exist or is not a string field.
	* @param[in] sFieldName - Name of the field.
	* @return New value of the field.
	*/
	virtual std::string GetStringField(const std::string & sFieldName) = 0;

};

typedef IBaseSharedPtr<IMessage> PIMessage;


/*************************************************************************************************************************
 Class interface for Response 
**************************************************************************************************************************/

class IResponse : public virtual IMessage {
public:
	/**
	* IResponse::GetResponseType - Returns the response type of the connection.
	* @return Message type identifier.
	*/
	virtual std::string GetResponseType() = 0;

};

typedef IBaseSharedPtr<IResponse> PIResponse;


/*************************************************************************************************************************
 Class interface for Request 
**************************************************************************************************************************/

class IRequest : public virtual IMessage {
public:
	/**
	* IRequest::GetRequestType - Returns the request type of the connection.
	* @return Message type identifier.
	*/
	virtual std::string GetRequestType() = 0;

	/**
	* IRequest::GetExpectedResponseType - Returns the expected response type of the connection.
	* @return Message type identifier.
	*/
	virtual std::string GetExpectedResponseType() = 0;

	/**
	* IRequest::SendBlocking - Sends the request to the end point and waits for a response.
	* @param[in] sServiceMethod - Service method to call.
	* @param[in] nTimeOutInMS - Timeout for the response in MS.
	* @return Response Instance
	*/
	virtual IResponse * SendBlocking(const std::string & sServiceMethod, const LibGRPCWrapper_uint32 nTimeOutInMS) = 0;

};

typedef IBaseSharedPtr<IRequest> PIRequest;


/*************************************************************************************************************************
 Class interface for Connection 
**************************************************************************************************************************/

class IConnection : public virtual IBase {
public:
	/**
	* IConnection::GetEndPoint - Returns the end point of the connection.
	* @return End point of the connection.
	*/
	virtual std::string GetEndPoint() = 0;

	/**
	* IConnection::Close - Closes the connection. All subsequent calls to the connection will fail.
	*/
	virtual void Close() = 0;

	/**
	* IConnection::CreateStaticRequest - Creates a message request to the end point.
	* @param[in] sRequestTypeIdentifier - Message Type Identifier of the request.
	* @param[in] sResponseTypeIdentifier - Message Type Identifier of the expected response.
	* @return Request Instance
	*/
	virtual IRequest * CreateStaticRequest(const std::string & sRequestTypeIdentifier, const std::string & sResponseTypeIdentifier) = 0;

};

typedef IBaseSharedPtr<IConnection> PIConnection;


/*************************************************************************************************************************
 Class interface for Protocol 
**************************************************************************************************************************/

class IProtocol : public virtual IBase {
public:
	/**
	* IProtocol::ConnectUnsecure - Connects to an end point
	* @param[in] sNetworkCredentials - Host to connect to
	* @return Connection Instance
	*/
	virtual IConnection * ConnectUnsecure(const std::string & sNetworkCredentials) = 0;

	/**
	* IProtocol::GetProtobufDefinition - Returns protobuf definition as string.
	* @return Protobuf file as string.
	*/
	virtual std::string GetProtobufDefinition() = 0;

	/**
	* IProtocol::HasMessageType - Returns if protocol buffer has a certain message type.
	* @param[in] sMessageTypeIdentifier - Message Type Identifier.
	* @return Returns if message type exists.
	*/
	virtual bool HasMessageType(const std::string & sMessageTypeIdentifier) = 0;

};

typedef IBaseSharedPtr<IProtocol> PIProtocol;


/*************************************************************************************************************************
 Global functions declarations
**************************************************************************************************************************/
class CWrapper {
public:
	/**
	* Ilibgrpcwrapper::GetVersion - retrieves the binary version of this library.
	* @param[out] nMajor - returns the major version of this library
	* @param[out] nMinor - returns the minor version of this library
	* @param[out] nMicro - returns the micro version of this library
	*/
	static void GetVersion(LibGRPCWrapper_uint32 & nMajor, LibGRPCWrapper_uint32 & nMinor, LibGRPCWrapper_uint32 & nMicro);

	/**
	* Ilibgrpcwrapper::GetLastError - Returns the last error recorded on this object
	* @param[in] pInstance - Instance Handle
	* @param[out] sErrorMessage - Message of the last error
	* @return Is there a last error to query
	*/
	static bool GetLastError(IBase* pInstance, std::string & sErrorMessage);

	/**
	* Ilibgrpcwrapper::AcquireInstance - Acquire shared ownership of an Instance
	* @param[in] pInstance - Instance Handle
	*/
	static void AcquireInstance(IBase* pInstance);

	/**
	* Ilibgrpcwrapper::ReleaseInstance - Releases shared ownership of an Instance
	* @param[in] pInstance - Instance Handle
	*/
	static void ReleaseInstance(IBase* pInstance);

	/**
	* Ilibgrpcwrapper::CreateProtocol - Returns a PLC instance
	* @param[in] sProtoBufferDefinition - Protobuf structure definition as string.
	* @return Protocol Instance
	*/
	static IProtocol * CreateProtocol(const std::string & sProtoBufferDefinition);

};

LibGRPCWrapperResult LibGRPCWrapper_GetProcAddress (const char * pProcName, void ** ppProcAddress);

} // namespace Impl
} // namespace LibGRPCWrapper

#endif // __LIBGRPCWRAPPER_CPPINTERFACES
